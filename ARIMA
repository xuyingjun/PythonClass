import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import statsmodels.api as sm 
from statsmodels.graphics.tsaplots import acf,pacf,plot_acf,plot_pacf 
from statsmodels.tsa.arima_model import ARMA 
from statsmodels.tsa.arima_model import ARIMA 

time_series_ = pd.Series([151.0, 188.46, 199.38, 219.75, 241.55, 262.58, 328.22, 396.26, 442.04, 517.77, 626.52, 717.08, 824.38, 913.38, 1088.39, 1325.83, 1700.92, 2109.38, 2499.77, 2856.47, 3114.02, 3229.29, 3545.39, 3880.53, 4212.82, 4757.45, 5633.24, 6590.19, 7617.47, 9333.4, 11328.92, 12961.1, 15967.61]) 
time_series_.index = pd.Index(sm.tsa.datetools.dates_from_range('1978','2010')) 
time_series_.plot(figsize=(12,8)) 
plt.show()

#取对数
time_series_log = np.log(time_series_)
time_series_log.plot(figsize=(8,6))
v0 = time_series_log[0]
print(np.exp(time_series_log))
plt.show()
#ADF
t=sm.tsa.stattools.adfuller(time_series_log, ) 
output=pd.DataFrame(index=['Test Statistic Value', "p-value", "Lags Used", "Number of Observations Used","Critical Value(1%)","Critical Value(5%)","Critical Value(10%)"],columns=['value']) 
output['value']['Test Statistic Value'] = t[0] 
output['value']['p-value'] = t[1] 
output['value']['Lags Used'] = t[2] 
output['value']['Number of Observations Used'] = t[3] 
output['value']['Critical Value(1%)'] = t[4]['1%'] 
output['value']['Critical Value(5%)'] = t[4]['5%'] 
output['value']['Critical Value(10%)'] = t[4]['10%'] 
print(output)

#差分、ADF
time_series = time_series_log.diff(1) 
time_series = time_series.dropna(how=any) 
time_series.plot(figsize=(8,6)) 
plt.show() 
t=sm.tsa.stattools.adfuller(time_series) 
output=pd.DataFrame(index=['Test Statistic Value', "p-value", "Lags Used", "Number of Observations Used","Critical Value(1%)","Critical Value(5%)","Critical Value(10%)"],columns=['value']) 
output['value']['Test Statistic Value'] = t[0] 
output['value']['p-value'] = t[1] 
output['value']['Lags Used'] = t[2] 
output['value']['Number of Observations Used'] = t[3] 
output['value']['Critical Value(1%)'] = t[4]['1%'] 
output['value']['Critical Value(5%)'] = t[4]['5%'] 
output['value']['Critical Value(10%)'] = t[4]['10%'] 
print(output)
print(time_series)

#acf、pacf
plot_acf(time_series) 
plot_pacf(time_series) 
plt.show() 

#自动获取p、q
import sys
def proper_model(data_ts, maxLag):
#     init_bic = sys.maxint//python2
    init_bic = sys.maxsize
    init_p = 0
    init_q = 0
    for p in np.arange(maxLag):
        for q in np.arange(maxLag):
            model = ARMA(data_ts, order=(p,q))
            try:
                results_ARMA = model.fit()
            except:
                continue
            bic = results_ARMA.bic
            if bic < init_bic:
                init_p = p
                init_q = q
                init_bic = bic
    return init_bic, init_p, init_q

#模型生成、预测
# p,d,q = (1,1,2) 
p,q = (1,0) 
# b,p,q = proper_model1(time_series, 10)
arima_mod = ARIMA(time_series_,order=(p,0,q))
arma_mod = ARMA(time_series_,order=(p,q))
result_arma = arma_mod.fit()
result_arma_pre = result_arma.predict(start='2011', end='2011')
result_arima = arima_mod.fit()
result_arima_pre = result_arima.predict(start='2011', end='2011')
print(result_arma_pre)
print(result_arima_pre)

#白噪声检测
from statsmodels.stats.diagnostic import acorr_ljungbox
p_value = acorr_ljungbox(result_arima.resid.values.squeeze(), lags=5)[1]
print(p_value)
